use threadpool::ThreadPool;
use std::{
    fs,
    io::{prelude::*, BufReader},
    net::{TcpListener, TcpStream},
    thread,
};


fn main() {
    let listener = TcpListener::bind("0.0.0.0:7878").unwrap();
    let pool = ThreadPool::new(4);
    for stream in listener.incoming() {
        let stream = stream.unwrap();

	pool.execute(|| {
	    
	    handle_connection(stream);
	    let threadnum = thread::current().id();
	    println!("connection on: {:?}", threadnum);
	});
    }
}

fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let request_line = buf_reader.lines().next().unwrap().unwrap();
    //println!("{}", request_line);
    let file_name_part_1 = &request_line.to_string()[3..11];
    println!("{}", file_name_part_1);
    //next line reverses string
    let file_name_part_2 = &file_name_part_1.chars().rev().collect::<String>();
    let file_name = &file_name_part_2[0..8];
    
    println!("{}", file_name);
    
    if request_line == "GET / HTTP/1.1" {
        let status_line = "HTTP/1.1 200 OK";
        let contents = fs::read_to_string("index.html").unwrap();
        let length = contents.len();

        let response = format!(
            "{status_line}\r\nContent-Length: {length}\r\n\r\n{contents}"
        );

        stream.write_all(response.as_bytes()).unwrap();
    
	// use elif to send other html pages
    }else {
	let status_line = "HTTP/1.1 404 NOT FOUND";
        let contents = fs::read_to_string("404.html").unwrap();
        let length = contents.len();

        let response = format!(
            "{status_line}\r\nContent-Length: {length}\r\n\r\n{contents}"
        );

        stream.write_all(response.as_bytes()).unwrap();
    }
}
